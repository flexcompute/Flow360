{
  "$defs": {
    "EntityList_Surface_GhostSurface_": {
      "additionalProperties": false,
      "description": "Parameters\n----------\nstored_entities : typing.Optional[typing.List[typing.Union[flow360.component.simulation.primitives.Surface, flow360.component.simulation.primitives.GhostSurface]]]\n    ",
      "properties": {
        "stored_entities": {
          "anyOf": [
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Surface"
                  },
                  {
                    "$ref": "#/$defs/GhostSurface"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "title": "Stored Entities"
        }
      },
      "required": [
        "stored_entities"
      ],
      "title": "EntityList[Surface,GhostSurface]",
      "type": "object"
    },
    "GhostSurface": {
      "additionalProperties": false,
      "description": "Represents a boudary surface that may or may not be generated therefore may or may not exist.\nIt depends on the submitted geometry/Surface mesh. E.g. the symmetry plane in `AutomatedFarfield`.\n\nParameters\n----------\nprivate_attribute_registry_bucket_name : typing.Literal['SurfaceEntityType'] = SurfaceEntityType\n        private_attribute_entity_type_name : typing.Literal['GhostSurface'] = GhostSurface\n        name : <class 'str'>\n        private_attribute_full_name : typing.Optional[str] = None\n    \nFor now we do not use metadata or any other information to validate (on the client side) whether the surface\nactually exists. We will let workflow error out if the surface is not found.\n\n- For meshing:\n   - we forbid using `GhostSurface` in any surface-related features which is not supported right now anyways.\n\n- For boundary condition and post-processing:\n    - Allow usage of `GhostSurface` but no validation. Solver validation will error out when finding mismatch\n    between the boundary condition and the mesh meta.",
      "properties": {
        "private_attribute_registry_bucket_name": {
          "const": "SurfaceEntityType",
          "default": "SurfaceEntityType",
          "enum": [
            "SurfaceEntityType"
          ],
          "title": "Private Attribute Registry Bucket Name",
          "type": "string"
        },
        "private_attribute_entity_type_name": {
          "const": "GhostSurface",
          "default": "GhostSurface",
          "enum": [
            "GhostSurface"
          ],
          "title": "Private Attribute Entity Type Name",
          "type": "string"
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "private_attribute_full_name": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Private Attribute Full Name"
        }
      },
      "required": [
        "name"
      ],
      "title": "GhostSurface",
      "type": "object"
    },
    "Surface": {
      "additionalProperties": false,
      "description": "Represents a boudary surface in three-dimensional space.\n\n\nParameters\n----------\nprivate_attribute_registry_bucket_name : typing.Literal['SurfaceEntityType'] = SurfaceEntityType\n        private_attribute_entity_type_name : typing.Literal['Surface'] = Surface\n        name : <class 'str'>\n        private_attribute_full_name : typing.Optional[str] = None\n        private_attribute_is_interface : typing.Optional[bool] = None\n    This is required when generated from volume mesh\n    but not required when from surface mesh meta.",
      "properties": {
        "private_attribute_registry_bucket_name": {
          "const": "SurfaceEntityType",
          "default": "SurfaceEntityType",
          "enum": [
            "SurfaceEntityType"
          ],
          "title": "Private Attribute Registry Bucket Name",
          "type": "string"
        },
        "private_attribute_entity_type_name": {
          "const": "Surface",
          "default": "Surface",
          "enum": [
            "Surface"
          ],
          "title": "Private Attribute Entity Type Name",
          "type": "string"
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "private_attribute_full_name": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Private Attribute Full Name"
        },
        "private_attribute_is_interface": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "This is required when generated from volume mesh\n        but not required when from surface mesh meta.",
          "title": "Private Attribute Is Interface"
        }
      },
      "required": [
        "name"
      ],
      "title": "Surface",
      "type": "object"
    }
  },
  "additionalProperties": false,
  "description": "Symmetry plane\n\nParameters\n----------\ntype : typing.Literal['SymmetryPlane'] = SymmetryPlane\n        entities : <class 'abc.EntityList[Surface,GhostSurface]'>\n        name : typing.Optional[str] = None\n    ",
  "properties": {
    "type": {
      "const": "SymmetryPlane",
      "default": "SymmetryPlane",
      "enum": [
        "SymmetryPlane"
      ],
      "title": "Type",
      "type": "string"
    },
    "surfaces": {
      "$ref": "#/$defs/EntityList_Surface_GhostSurface_"
    },
    "name": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "title": "Name"
    }
  },
  "required": [
    "surfaces"
  ],
  "title": "SymmetryPlane",
  "type": "object"
}