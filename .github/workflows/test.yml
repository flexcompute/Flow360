name: unit testing

on:
  workflow_dispatch:
  push:
    branches: [ develop, main, release-candidate/*, BenY/OrganizingAndDocumentation ]
  pull_request:
    branches: [ develop, main, release-candidate/*, BenY/OrganizingAndDocumentation ]
  workflow_call:

jobs:
  code-style:
    uses: ./.github/workflows/codestyle.yml
  testing:
    needs: code-style
    name: test ${{ matrix.python-version }} - ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        platform: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4
      with:
        clean: true

    - name: Create local temp folder and override environment
      run: |
        mkdir temp
        echo "TEMP=${{ github.workspace }}/temp" >> $GITHUB_ENV
        echo "TMP=${{ github.workspace }}/temp" >> $GITHUB_ENV

    - name: Install poetry
      run: pipx install poetry
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'poetry'
    - name: Clear Poetry cache on Ubuntu and macOS
      if: runner.os != 'Windows'
      run: |
        poetry cache clear --all pypi
        rm -rf /Users/runner/Library/Caches/pypoetry/virtualenvs
    - name: Clear Poetry cache on Windows
      if: runner.os == 'Windows'
      run: |
        poetry cache clear --all pypi
        Remove-Item -Recurse -Force $env:USERPROFILE\AppData\Local\pypoetry\Cache\virtualenvs
    - name: Install dependencies
      run: |
        poetry install
    - name: Run simulation_params tests
      run: poetry run pytest -n logical -rA tests/simulation
    - name: Run flow360_params tests
      run: poetry run pytest -n logical -rA --ignore tests/simulation
